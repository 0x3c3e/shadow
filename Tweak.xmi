// Shadow by jjolano

#import "Includes/Shadow.h"

Shadow *_shadow = nil;

// Stable Hooks
#import "Hooks/Stable/libc.xm"
#import "Hooks/Stable/NSFileHandle.xm"
#import "Hooks/Stable/NSFileManager.xm"
#import "Hooks/Stable/NSURL.xm"
#import "Hooks/Stable/UIApplication.xm"

// Testing Hooks
#import "Hooks/Testing/NSBundle.xm"
#import "Hooks/Testing/NSFileManager.xm"

// Other Hooks
#import "Hooks/ApplePrivate.xm"
#import "Hooks/Debugging.xm"
#import "Hooks/dyld.xm"
#import "Hooks/Libraries.xm"
#import "Hooks/Sandbox.xm"

void init_path_map(Shadow *shadow) {
    // Restrict / by whitelisting
    [shadow addPath:@"/" restricted:YES];
    [shadow addPath:@"/.file" restricted:NO];
    [shadow addPath:@"/AppleInternal" restricted:NO];
    [shadow addPath:@"/Applications" restricted:NO];
    [shadow addPath:@"/bin" restricted:YES];
    [shadow addPath:@"/boot" restricted:NO];
    [shadow addPath:@"/cores" restricted:NO];
    [shadow addPath:@"/dev" restricted:NO];
    [shadow addPath:@"/Developer" restricted:NO];
    [shadow addPath:@"/lib" restricted:NO];
    [shadow addPath:@"/mnt" restricted:NO];
    [shadow addPath:@"/private" restricted:NO];
    [shadow addPath:@"/sbin" restricted:YES];

    // Restrict /etc
    [shadow addPath:@"/etc" restricted:NO];
    [shadow addPath:@"/etc/." restricted:YES];
    [shadow addPath:@"/etc/apt" restricted:YES];
    [shadow addPath:@"/etc/dpkg" restricted:YES];
    [shadow addPath:@"/etc/ssh" restricted:YES];
    [shadow addPath:@"/etc/dropbear" restricted:YES];
    [shadow addPath:@"/etc/rc.d" restricted:YES];
    [shadow addPath:@"/etc/pam.d" restricted:YES];
    [shadow addPath:@"/etc/default" restricted:YES];
    [shadow addPath:@"/etc/motd" restricted:YES];
    
    // Restrict /Library by whitelisting
    [shadow addPath:@"/Library" restricted:YES];
    [shadow addPath:@"/Library/Application Support" restricted:YES];
    [shadow addPath:@"/Library/Application Support/AggregateDictionary" restricted:NO];
    [shadow addPath:@"/Library/Application Support/BTServer" restricted:NO];
    [shadow addPath:@"/Library/Audio" restricted:NO];
    [shadow addPath:@"/Library/Caches" restricted:NO];
    [shadow addPath:@"/Library/Filesystems" restricted:NO];
    [shadow addPath:@"/Library/Internet Plug-Ins" restricted:NO];
    [shadow addPath:@"/Library/Keychains" restricted:NO];
    [shadow addPath:@"/Library/LaunchAgents" restricted:NO];
    [shadow addPath:@"/Library/Logs" restricted:NO];
    [shadow addPath:@"/Library/Managed Preferences" restricted:NO];
    [shadow addPath:@"/Library/MobileDevice" restricted:NO];
    [shadow addPath:@"/Library/MusicUISupport" restricted:NO];
    [shadow addPath:@"/Library/Preferences" restricted:NO];
    [shadow addPath:@"/Library/Printers" restricted:NO];
    [shadow addPath:@"/Library/Ringtones" restricted:NO];
    [shadow addPath:@"/Library/Updates" restricted:NO];
    [shadow addPath:@"/Library/Wallpaper" restricted:NO];
    
    // Restrict /tmp
    [shadow addPath:@"/tmp" restricted:NO];
    [shadow addPath:@"/tmp/substrate" restricted:YES];
    [shadow addPath:@"/tmp/Substrate" restricted:YES];
    [shadow addPath:@"/tmp/cydia.log" restricted:YES];
    [shadow addPath:@"/tmp/syslog" restricted:YES];
    [shadow addPath:@"/tmp/slide.txt" restricted:YES];
    [shadow addPath:@"/tmp/amfidebilitate.out" restricted:YES];
    
    // Restrict /User
    [shadow addPath:@"/User" restricted:NO];
    [shadow addPath:@"/User/Library/Cydia" restricted:YES];
    [shadow addPath:@"/User/Library/Logs/Cydia" restricted:YES];
    [shadow addPath:@"/User/Library/SBSettings" restricted:YES];
    [shadow addPath:@"/User/Media/panguaxe" restricted:YES];

    // Restrict /usr
    [shadow addPath:@"/usr" restricted:NO];
    [shadow addPath:@"/usr/bin" restricted:YES];
    [shadow addPath:@"/usr/include" restricted:YES];
    [shadow addPath:@"/usr/lib" restricted:YES];
    [shadow addPath:@"/usr/libexec" restricted:YES];
    [shadow addPath:@"/usr/local" restricted:YES];
    [shadow addPath:@"/usr/sbin" restricted:YES];
    [shadow addPath:@"/usr/share/dpkg" restricted:YES];
    [shadow addPath:@"/usr/share/gnupg" restricted:YES];
    [shadow addPath:@"/usr/share/bigboss" restricted:YES];
    [shadow addPath:@"/usr/share/jailbreak" restricted:YES];
    [shadow addPath:@"/usr/share/entitlements" restricted:YES];
    [shadow addPath:@"/usr/share/tabset" restricted:YES];
    [shadow addPath:@"/usr/share/terminfo" restricted:YES];
    
    // Restrict /var
    [shadow addPath:@"/var" restricted:NO];
    [shadow addPath:@"/var/cache/apt" restricted:YES];
    [shadow addPath:@"/var/lib" restricted:YES];
    [shadow addPath:@"/var/stash" restricted:YES];
    [shadow addPath:@"/var/db/stash" restricted:YES];
    [shadow addPath:@"/var/rocket_stashed" restricted:YES];
    [shadow addPath:@"/var/tweak" restricted:YES];
    [shadow addPath:@"/var/LIB" restricted:YES];
    [shadow addPath:@"/var/ulb" restricted:YES];
    [shadow addPath:@"/var/bin" restricted:YES];
    [shadow addPath:@"/var/sbin" restricted:YES];
    [shadow addPath:@"/var/profile" restricted:YES];
    [shadow addPath:@"/var/motd" restricted:YES];
    [shadow addPath:@"/var/dropbear" restricted:YES];
    [shadow addPath:@"/var/run" restricted:YES];

    // Restrict /System
    [shadow addPath:@"/System" restricted:NO];
    [shadow addPath:@"/System/Library/PreferenceBundles/AppList.bundle" restricted:YES];
}

// SpringBoard hook
%group hook_springboard
%hook SpringBoard
- (void)applicationDidFinishLaunching:(UIApplication *)application {
    %orig;

    // Generate file map.
    Shadow *shadow = [Shadow new];

    if(shadow) {
        [shadow generateFileMap];
    } else {
        NSLog(@"failed to initialize Shadow");
    }
}
%end
%end

%ctor {
    NSBundle *bundle = [NSBundle mainBundle];

    if(bundle != nil) {
        NSString *executablePath = [bundle executablePath];
        NSString *bundleIdentifier = [bundle bundleIdentifier];

        // Load preferences file
        NSMutableDictionary *prefs = [[NSMutableDictionary alloc] initWithContentsOfFile:PREFS_PATH];

        if(!prefs) {
            // Create new preferences file
            prefs = [NSMutableDictionary new];
            [prefs writeToFile:PREFS_PATH atomically:YES];
        }

        // Check if Shadow is enabled
        if(prefs[@"enabled"] && ![prefs[@"enabled"] boolValue]) {
            // Shadow disabled in preferences
            return;
        }

        // Check if safe bundleIdentifier
        if(prefs[@"exclude_system_apps"]) {
            // Disable Shadow for Apple and jailbreak apps
            NSArray *excluded_bundleids = @[
                @"com.apple", // Apple apps
                @"is.workflow.my.app", // Shortcuts
                @"science.xnu.undecimus", // unc0ver
                @"com.electrateam.chimera", // Chimera
                @"org.coolstar.electra" // Electra
            ];

            for(NSString *bundle_id in excluded_bundleids) {
                if([bundleIdentifier hasPrefix:bundle_id]) {
                    return;
                }
            }
        }

        // Check if excluded bundleIdentifier
        if(prefs[@"mode"]) {
            if([prefs[@"mode"] isEqualToString:@"whitelist"]) {
                // Whitelist - disable Shadow if not enabled for this bundleIdentifier
                if(!prefs[bundleIdentifier] || ![prefs[bundleIdentifier] boolValue]) {
                    return;
                }
            } else {
                // Blacklist - disable Shadow if enabled for this bundleIdentifier
                if(prefs[bundleIdentifier] && [prefs[bundleIdentifier] boolValue]) {
                    return;
                }
            }
        }

        // SpringBoard
        if([bundleIdentifier isEqualToString:@"com.apple.SpringBoard"]) {
            if(prefs[@"auto_file_map_generation_enabled"] && [prefs[@"auto_file_map_generation_enabled"] boolValue]) {
                %init(hook_springboard);
            }

            return;
        }

        // System Applications
        if([executablePath hasPrefix:@"/Applications"]) {
            return;
        }

        // User (Sandboxed) Applications
        if([executablePath hasPrefix:@"/var/containers/Bundle/Application"]) {
            NSLog(@"bundleIdentifier: %@", bundleIdentifier);

            // Initialize Shadow
            _shadow = [Shadow new];

            if(!_shadow) {
                NSLog(@"failed to initialize Shadow");
                return;
            }

            // Initialize restricted path map
            init_path_map(_shadow);

            // Initialize file map
            if(prefs[@"file_map"]) {
                [_shadow generateFileMapWithArray:prefs[@"file_map"]];
            }

            // Initialize stable hooks
            %init(hook_libc);
            %init(hook_NSFileHandle);
            %init(hook_NSFileManager);
            %init(hook_NSURL);
            %init(hook_UIApplication);

            // Initialize testing hooks (if enabled)
            if(prefs[@"testing_hooks_enabled"] && [prefs[@"testing_hooks_enabled"] boolValue]) {
                %init(hook_NSBundle);
                %init(hook_NSFileManager_testing);
            }

            // Initialize other hooks
            if(prefs[@"private_hooks_enabled"] && [prefs[@"private_hooks_enabled"] boolValue]) {
                %init(hook_private);
            }

            if(prefs[@"debugging_hooks_enabled"] && [prefs[@"debugging_hooks_enabled"] boolValue]) {
                %init(hook_debugging);
            }

            if(prefs[@"dyld_hooks_enabled"] && [prefs[@"dyld_hooks_enabled"] boolValue]) {
                %init(hook_dyld_image);

                if(prefs[@"dyld_filter_enabled"] && [prefs[@"dyld_filter_enabled"] boolValue]) {
                    // Generate filtered dyld array
                    [_shadow generateDyldArray];
                }
            }

            if(prefs[@"dlsym_hook_enabled"] && [prefs[@"dlsym_hook_enabled"] boolValue]) {
                %init(hook_dyld_dlsym);
            }

            if(prefs[@"library_hooks_enabled"] && [prefs[@"library_hooks_enabled"] boolValue]) {
                %init(hook_libraries);
            }

            if(prefs[@"sandbox_hooks_enabled"] && [prefs[@"sandbox_hooks_enabled"] boolValue]) {
                %init(hook_sandbox);
            }
        }
    }
}
