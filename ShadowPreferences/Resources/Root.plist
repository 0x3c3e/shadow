<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>items</key>
	<array>
		<dict>
			<key>cell</key>
			<string>PSGroupCell</string>
		</dict>
		<dict>
			<key>cell</key>
			<string>PSSwitchCell</string>
			<key>default</key>
			<true/>
			<key>defaults</key>
			<string>me.jjolano.shadow</string>
			<key>key</key>
			<string>enabled</string>
			<key>label</key>
			<string>Enable Shadow</string>
		</dict>
		<dict>
			<key>cell</key>
			<string>PSSwitchCell</string>
			<key>default</key>
			<true/>
			<key>defaults</key>
			<string>me.jjolano.shadow</string>
			<key>key</key>
			<string>exclude_system_apps</string>
			<key>label</key>
			<string>Disable Shadow for Safe Apps</string>
		</dict>

		<!-- Application List -->
		<dict>
			<key>cell</key>
			<string>PSGroupCell</string>
			<key>label</key>
			<string>Application Settings</string>
			<key>footerText</key>
			<string>Blacklist mode enables Shadow for all except selected apps. Whitelist mode enables Shadow only for selected apps.</string>
		</dict>
		<dict>
			<key>cell</key>
			<string>PSLinkCell</string>
			<key>bundle</key>
			<string>AppList</string>
			<key>isController</key>
			<string>1</string>
			<key>label</key>
			<string>Applications</string>
			<key>ALAllowsSelection</key>
			<string>0</string>
			<key>ALSettingsKeyPrefix</key>
			<string></string>
			<key>ALSettingsDefaultValue</key>
			<string>0</string>
			<key>ALSettingsPath</key>
			<string>/var/mobile/Library/Preferences/me.jjolano.shadow.plist</string>
			<key>ALSingleEnabledMode</key>
			<false/>
			<key>ALSectionDescriptors</key>
			<array>
				<dict>
					<key>cell-class-name</key>
					<string>ALSwitchCell</string>
					<key>icon-size</key>
					<string>29</string>
					<key>suppress-hidden-apps</key>
					<string>1</string>
					<key>title</key>
					<string>Select apps to include/exclude</string>
					<key>predicate</key>
					<string>isSystemApplication = FALSE</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>cell</key>
			<string>PSSegmentCell</string>
			<key>key</key>
			<string>mode</string>
			<key>default</key>
			<string>blacklist</string>
			<key>defaults</key>
			<string>me.jjolano.shadow</string>
			<key>validValues</key>
			<array>
				<string>blacklist</string>
				<string>whitelist</string>
			</array>
			<key>validTitles</key>
			<array>
				<string>Blacklist Mode</string>
				<string>Whitelist Mode</string>
			</array>
			<key>shortTitles</key>
			<array>
				<string>Blacklist Mode</string>
				<string>Whitelist Mode</string>
			</array>
		</dict>

		<!-- Advanced Settings -->
		<dict>
			<key>cell</key>
			<string>PSGroupCell</string>
			<key>label</key>
			<string>Advanced Settings</string>
			<key>footerText</key>
			<string>Filtering dynamic libraries helps defeat intermediate levels of jailbreak detection. This setting will eventually become standard as implementation stability is confirmed.</string>
		</dict>
		<dict>
			<key>cell</key>
			<string>PSSwitchCell</string>
			<key>default</key>
			<false/>
			<key>defaults</key>
			<string>me.jjolano.shadow</string>
			<key>key</key>
			<string>dyld_array_enabled</string>
			<key>label</key>
			<string>Filter Dynamic Libraries</string>
		</dict>
		<dict>
			<key>cell</key>
			<string>PSGroupCell</string>
			<key>footerText</key>
			<string>Private methods are undocumented Apple methods that can be used by apps to detect jailbreak status. These methods are not allowed to be used by App Store apps, but it shouldn't hurt to hook them anyway.</string>
		</dict>
		<dict>
			<key>cell</key>
			<string>PSSwitchCell</string>
			<key>default</key>
			<false/>
			<key>defaults</key>
			<string>me.jjolano.shadow</string>
			<key>key</key>
			<string>private_methods</string>
			<key>label</key>
			<string>Hook Private Methods</string>
		</dict>
		<dict>
			<key>cell</key>
			<string>PSGroupCell</string>
			<key>footerText<key>
			<string>Some apps check if the app is being traced or debugged by an external process. Enabling these hooks will prevent these checks.</string>
		</dict>
		<dict>
			<key>cell</key>
			<string>PSSwitchCell</string>
			<key>default</key>
			<false/>
			<key>defaults</key>
			<string>me.jjolano.shadow</string>
			<key>key</key>
			<string>hook_debugging</string>
			<key>label</key>
			<string>Hook Debugging Checks</string>
		</dict>
		<dict>
			<key>cell</key>
			<string>PSGroupCell</string>
			<key>footerText<key>
			<string>This hook is only necessary if apps are able to use methods that are otherwise restricted by the sandbox.</string>
		</dict>
		<dict>
			<key>cell</key>
			<string>PSSwitchCell</string>
			<key>default</key>
			<false/>
			<key>defaults</key>
			<string>me.jjolano.shadow</string>
			<key>key</key>
			<string>hook_sandboxed</string>
			<key>label</key>
			<string>Hook Sandboxed Methods</string>
		</dict>

		<!-- Experimental Settings -->
		<dict>
			<key>cell</key>
			<string>PSGroupCell</string>
			<key>label</key>
			<string>Experimental Settings</string>
			<key>footerText</key>
			<string>Experimental hooks are newly added bypass methods to Shadow and may potentially cause issues in some apps.</string>
		</dict>
		<dict>
			<key>cell</key>
			<string>PSSwitchCell</string>
			<key>default</key>
			<false/>
			<key>defaults</key>
			<string>me.jjolano.shadow</string>
			<key>key</key>
			<string>experimental_hooks</string>
			<key>label</key>
			<string>Experimental Hooks</string>
		</dict>
		<dict>
			<key>cell</key>
			<string>PSGroupCell</string>
			<key>footerText<key>
			<string>Processes each path string passed through Shadow's path filters by resolving any special path characters. This mitigates any funny business put in path strings by developers.</string>
		</dict>
		<dict>
			<key>cell</key>
			<string>PSSwitchCell</string>
			<key>default</key>
			<false/>
			<key>defaults</key>
			<string>me.jjolano.shadow</string>
			<key>key</key>
			<string>standardize_path</string>
			<key>label</key>
			<string>Standardize Path Strings</string>
		</dict>
		<dict>
			<key>cell</key>
			<string>PSGroupCell</string>
			<key>footerText<key>
			<string>Hooking dlsym() is an advanced jailbreak detection bypass. This hook is unstable in some apps, and may cause issues.</string>
		</dict>
		<dict>
			<key>cell</key>
			<string>PSLinkCell</string>
			<key>bundle</key>
			<string>AppList</string>
			<key>isController</key>
			<string>1</string>
			<key>label</key>
			<string>Hook dlsym()</string>
			<key>ALAllowsSelection</key>
			<string>0</string>
			<key>ALSettingsKeyPrefix</key>
			<string></string>
			<key>ALSettingsDefaultValue</key>
			<string>0</string>
			<key>ALSettingsPath</key>
			<string>/var/mobile/Library/Preferences/me.jjolano.shadow.dlsym.plist</string>
			<key>ALSingleEnabledMode</key>
			<false/>
			<key>ALSectionDescriptors</key>
			<array>
				<dict>
					<key>cell-class-name</key>
					<string>ALSwitchCell</string>
					<key>icon-size</key>
					<string>29</string>
					<key>suppress-hidden-apps</key>
					<string>1</string>
					<key>title</key>
					<string>Select apps to enable dlsym() hook</string>
					<key>predicate</key>
					<string>isSystemApplication = FALSE</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>cell</key>
			<string>PSGroupCell</string>
			<key>footerText<key>
			<string>File map enables Shadow to efficiently perform file path checks. Generating a file map will scan installed package files and "blacklist" them. Due to the nature of this file map generation, tweaks that rely on their files during runtime will have issues.</string>
		</dict>
		<dict>
			<key>cell</key>
			<string>PSLinkCell</string>
			<key>bundle</key>
			<string>AppList</string>
			<key>isController</key>
			<string>1</string>
			<key>label</key>
			<string>Use File Map</string>
			<key>ALAllowsSelection</key>
			<string>0</string>
			<key>ALSettingsKeyPrefix</key>
			<string></string>
			<key>ALSettingsDefaultValue</key>
			<string>0</string>
			<key>ALSettingsPath</key>
			<string>/var/mobile/Library/Preferences/me.jjolano.shadow.map.plist</string>
			<key>ALSingleEnabledMode</key>
			<false/>
			<key>ALSectionDescriptors</key>
			<array>
				<dict>
					<key>cell-class-name</key>
					<string>ALSwitchCell</string>
					<key>icon-size</key>
					<string>29</string>
					<key>suppress-hidden-apps</key>
					<string>1</string>
					<key>title</key>
					<string>Select apps to enable file map</string>
					<key>predicate</key>
					<string>isSystemApplication = FALSE</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>cell</key>
			<string>PSButtonCell</string>
			<key>action</key>
			<string>generate_map:</string>
			<key>label</key>
			<string>Generate File Map</string>
			<key>confirmation</key>
			<dict>
				<key>prompt</key>
				<string>This will read all your installed package files and compile it into a database for Shadow to use in bypassing jailbreak detection. This may take a while, depending on how many packages are installed.</string>
				<key>title</key>
				<string>Continue</string>
				<key>okTitle</key>
				<string>Continue</string>
				<key>cancelTitle</key>
				<string>Cancel</string>
			</dict>
		</dict>

		<!-- Workarounds -->
		<dict>
			<key>cell</key>
			<string>PSGroupCell</string>
			<key>label</key>
			<string>Workarounds</string>
			<key>footerText</key>
			<string>The access() workaround will reduce bypass effectiveness, but may be necessary due to how tweaks are loaded by Substrate (unc0ver). It can safely be disabled for Substitute (Chimera/Electra).</string>
		</dict>
		<dict>
			<key>cell</key>
			<string>PSSwitchCell</string>
			<key>default</key>
			<true/>
			<key>defaults</key>
			<string>me.jjolano.shadow</string>
			<key>key</key>
			<string>workaround_access</string>
			<key>label</key>
			<string>access() Workaround</string>
		</dict>
	</array>
	<key>title</key>
	<string>Shadow</string>
</dict>
</plist>
